package com.mrd.bitlib.model;

import com.mrd.bitlib.util.HexUtils;
import org.junit.Test;

import static org.junit.Assert.*;

public class TransactionTest {

   @Test
   public void testIsRbf() throws Exception {
      // tx with sequence number maxint
      final Transaction txSeqFFFFFFFF = Transaction.fromBytes(HexUtils.toBytes("010000000190F55E38240AB795F7E11DF5E272D699B525C0E50AF69733FDA1B583C4273C23000000008A47304402206A945B64AE1478F1ED1374D3F1BD0B9DB66B424804EFB3CE59B38293A25F5CAF022037695FE1B04A07569E0F6C019AA406492294151F3A0E88CAE2C53ED713D5C6D50141048FD4539156A8AD9EF7E885CEAD013BF5377DE67E05AA34B662C6431F684C1D61D83B690FB8FEEEB69C305B4043F8D3DBB4F2847FEAF767E8EAC1E51E9C4425B2FFFFFFFF025E31920B000000001976A914152E9F6874A0768ADA32F1C8C5FC80337FD7EE5988AC00E1F505000000001976A914D3F9702528B302DBADCBBE26E91001C2E453814088ACB4270600"));
      assertFalse(txSeqFFFFFFFF.isRbfAble());

      // tx with sequence number maxint-1
      final Transaction txSeqFEFFFFFF = Transaction.fromBytes(HexUtils.toBytes("010000000190F55E38240AB795F7E11DF5E272D699B525C0E50AF69733FDA1B583C4273C23000000008A47304402206A945B64AE1478F1ED1374D3F1BD0B9DB66B424804EFB3CE59B38293A25F5CAF022037695FE1B04A07569E0F6C019AA406492294151F3A0E88CAE2C53ED713D5C6D50141048FD4539156A8AD9EF7E885CEAD013BF5377DE67E05AA34B662C6431F684C1D61D83B690FB8FEEEB69C305B4043F8D3DBB4F2847FEAF767E8EAC1E51E9C4425B2FEFFFFFF025E31920B000000001976A914152E9F6874A0768ADA32F1C8C5FC80337FD7EE5988AC00E1F505000000001976A914D3F9702528B302DBADCBBE26E91001C2E453814088ACB4270600"));
      assertFalse(txSeqFEFFFFFF.isRbfAble());

      // tx with sequence number maxint-2
      final Transaction txSeqFDFFFFFF = Transaction.fromBytes(HexUtils.toBytes("010000000190F55E38240AB795F7E11DF5E272D699B525C0E50AF69733FDA1B583C4273C23000000008A47304402206A945B64AE1478F1ED1374D3F1BD0B9DB66B424804EFB3CE59B38293A25F5CAF022037695FE1B04A07569E0F6C019AA406492294151F3A0E88CAE2C53ED713D5C6D50141048FD4539156A8AD9EF7E885CEAD013BF5377DE67E05AA34B662C6431F684C1D61D83B690FB8FEEEB69C305B4043F8D3DBB4F2847FEAF767E8EAC1E51E9C4425B2FDFFFFFF025E31920B000000001976A914152E9F6874A0768ADA32F1C8C5FC80337FD7EE5988AC00E1F505000000001976A914D3F9702528B302DBADCBBE26E91001C2E453814088ACB4270600"));
      assertTrue(txSeqFDFFFFFF.isRbfAble());
   }

   @Test
   public void testOpReturn() throws Exception {
      final Transaction txOpReturn = Transaction.fromBytes(HexUtils.toBytes("0100000002f8c106b44b3cf45946848a8d4b62f87813202ff9d4a320a00d24803edbebd8b700000000fdfd0000473044022011805e1400dbea6039c340eb4e19488432e7852c859ccb7be40e4f86e5671d0302205c561335fee1f336d975e87519b9dd5508035df7c63d6ce42d420d76b29f7c9d01483045022100f4eb9014aee7bcfb8fd9fb84ca61692a86a1a32bf80c91da8dde32d06aef131a022029f58d1831d03ceeda3918ad1be1fb531eff2082fd5a47b53f4b113077dc2f0e014c6952210315f2a4e2a1df0391dabfb605aca1e3c0d5b4ed7ad2857b752c26a656223a8fd021031e45f9ea24c00ccdba4ca386dc39473acfc8870ac55ca0b61dc88f201f1822382102f5af92ca47e95786b67d3787a05cafef65896a31555cc72b82ecdb7b0c43777d53aeffffffffaa553d7c79f15321ad55f9a5bbcfa9a2c24f5e09b4e173d27fd49419cbfdf49900000000fc00473044022070f68f0bcd177ca92e25942ef5cd66582d960e5145c4bd425da6d586e7050a14022022836890e3e25679e137c7370d2508a731d17ba89eefd1475f09387bbe7374ae014730440220647aedfcf96b4ceb278818c8632bfc36bbd6a899c166163ba34e2a007b41537d0220163620e2db8e559480dc4e6884b92a42c18e316b22376ac3c63a2ba393a179c3014c6952210315f2a4e2a1df0391dabfb605aca1e3c0d5b4ed7ad2857b752c26a656223a8fd021031e45f9ea24c00ccdba4ca386dc39473acfc8870ac55ca0b61dc88f201f1822382102f5af92ca47e95786b67d3787a05cafef65896a31555cc72b82ecdb7b0c43777d53aeffffffff03b80b00000000000017a914ff90cb7560f7351d59638f56d317e0896994eb91870000000000000000096a0743430215002014b80b00000000000017a914027ef0e2a14e64c697ac0b1680de04af59129e9a8700000000"));
      assertTrue(txOpReturn.outputs[1].script instanceof ScriptOutputOpReturn);

      ScriptOutputOpReturn script = (ScriptOutputOpReturn) txOpReturn.outputs[1].script;
      assertEquals(HexUtils.toHex(script.getDataBytes()),"43430215002014");

   }
}